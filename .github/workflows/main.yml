name: Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches:
      - main
    paths-ignore:
      - _infra/spinnaker/**
  pull_request:
    branches:
      - main
    paths-ignore:
      - _infra/spinnaker/**
      - _infra/helm/ras-rm-benchmark/Chart.yaml

env:
  IMAGE: ras-rm-benchmark
  REGISTRY_HOSTNAME: eu.gcr.io
  HOST: ${{ secrets.GOOGLE_PROJECT_ID }}
  RELEASE_HOST: ${{ secrets.RELEASE_PROJECT_ID }}
  CHART_DIRECTORY: _infra/helm/ras-rm-benchmark
  SPINNAKER_TOPIC: ${{ secrets.SPINNAKER_TOPIC }}
  ARTIFACT_BUCKET: ${{ secrets.ARTIFACT_BUCKET }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build & package"
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          token: ${{ secrets.BOT_TOKEN }}

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Build application
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GCR_KEY }}
      - run: |
          gcloud auth configure-docker

      - name: Retrieving PR tag
        if: github.ref != 'refs/heads/main'
        id: tag
        run: |
          PR_NUMBER=pr-$(echo "$GITHUB_REF" | awk -F / '{print $3}')
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
          echo "The PR tag is $PR_NUMBER"

      - name: Build PR tagged Docker image
        if: github.ref != 'refs/heads/main'
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$HOST"/"$IMAGE":"$PR_NUMBER" -f _infra/docker/Dockerfile .

      - name: Push PR tagged Docker image to GAR
        if: github.ref != 'refs/heads/main'
        run: |
          docker push "$REGISTRY_HOSTNAME"/"$HOST"/"$IMAGE":"$PR_NUMBER"

      - name: Prepare PR Helm chart
        if: github.ref != 'refs/heads/main'
        run: |
          echo "Preparing PR Helm chart"
          ls -ltra
          cd _infra/helm/ras-rm-benchmark
          ls -ltra
          sed -i '' -e "s/tag: latest/tag: ${PR_NUMBER}/g" _infra/helm/ras-rm-benchmark/values.yaml

      - name: Template Helm chart
        run: |
          helm template $CHART_DIRECTORY

      - name: Package Helm
        run: |
          HELM_CHART_VERSION=$(grep -E "version:\s+" $CHART_DIRECTORY/Chart.yaml | cut -d" " -f2 | sed -r 's/"//g')
          echo "HELM_CHART_VERSION=${HELM_CHART_VERSION=}" >> $GITHUB_ENV
          echo "Helm Chart.yaml version is $HELM_CHART_VERSION"
          helm dep up $CHART_DIRECTORY
          helm package $CHART_DIRECTORY

      - name: Publish dev Chart
        if: github.ref != 'refs/heads/main'
        run: |
          mv $IMAGE-${{ env.HELM_CHART_VERSION }}.tgz $IMAGE-latest.tgz
          gsutil cp $IMAGE-*.tgz gs://$ARTIFACT_BUCKET/$IMAGE/

      - name: Retrieving most recent Github release tag
        if: github.ref != 'refs/heads/main'
        id: vars
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0)
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "The Most recent Github release tag is $TAG"

      - name: Update appVersion in Helm Chart.yaml
        if: github.ref != 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          COMMIT_MSG: |
            auto patch increment
        shell: bash
        run: |
          echo "Current git release tag: $TAG"
          export APP_VERSION=$(grep -E "appVersion:\s+" $CHART_DIRECTORY/Chart.yaml | cut -d" " -f2 | sed -r 's/"//g')
          echo "Helm Chart.yaml appVersion: $APP_VERSION"
          if [ $TAG = $APP_VERSION ]; then
            echo "Github tag and current Helm chart appVersion match, bumping appVersion semver patch version"
            OLD_SEMVER_PATCH_VERSION=$(echo $TAG | cut -d '.' -f3)
            echo "OLD semver patch version: $OLD_SEMVER_PATCH_VERSION"
            NEW_SEMVER_PATCH_VERSION=$(($OLD_SEMVER_PATCH_VERSION + 1))
            echo "New semver patch version: $NEW_SEMVER_PATCH_VERSION"
            NEW_SEMVER_VERSION="appVersion: $(echo $TAG | sed -e "s/[0-9]\{1,3\}/$NEW_SEMVER_PATCH_VERSION/3")"
            echo "Updating Chart.yaml appVersion from $APP_VERSION to $NEW_SEMVER_VERSION"
            sed -i -e "s/appVersion: .*/$NEW_SEMVER_VERSION/g" $CHART_DIRECTORY/Chart.yaml

            git config user.name "ras-rm-pr-bot"
            git config user.email "${{ secrets.BOT_EMAIL }}"

            git remote set-url origin https://ras-rm-pr-bot:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git

            git remote update
            git fetch
            git checkout ${{ github.head_ref }}
            git add $CHART_DIRECTORY/Chart.yaml
            git commit -m "$COMMIT_MSG"

            git push 
          else
            echo "Github tag and current Helm chart appVersion do not match, assuming the appVersion semver patch version bump has happened"
            echo "Using current Helm Chart.yaml appVersion: $APP_VERSION"
          fi

      #######
      # The following steps are only carried out following a merge to the main branch
      #######

      - name: Retrieving appVersion from Helm Chart.yaml
        if: github.ref == 'refs/heads/main'
        id: release
        shell: bash
        run: |
          APP_VERSION=$(grep -E "appVersion:\s+" $CHART_DIRECTORY/Chart.yaml | cut -d" " -f2 | sed -r 's/"//g')
          echo "Using Helm Chart.yaml appVersion: $APP_VERSION"
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: Build Release tagged Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -f _infra/docker/Dockerfile -t "$REGISTRY_HOSTNAME"/"$RELEASE_HOST"/"$IMAGE":"$APP_VERSION" .

      - name: Push Release image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push "$REGISTRY_HOSTNAME"/"$RELEASE_HOST"/"$IMAGE":"$APP_VERSION"

      - name: Publish Charts
        if: github.ref == 'refs/heads/main'
        run: |
          gsutil cp $IMAGE-*.tgz gs://$ARTIFACT_BUCKET/$IMAGE/

      - uses: actions/create-release@v1
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $APP_VERSION
          release_name: $APP_VERSION
          body: |
            Automated release
            $APP_VERSION
          draft: false
          prerelease: false

      - name: Trigger Spinnaker PUBSUB deployment
        if: github.ref == 'refs/heads/main'
        run: |
          gcloud pubsub topics publish $SPINNAKER_TOPIC --project $HOST \
          --message "{ \"kind\": \"storage#object\", \"name\": \"$IMAGE/$IMAGE-${{ env.HELM_CHART_VERSION }}.tgz\", \"bucket\": \"$ARTIFACT_BUCKET\" }" \
          --attribute cd="actions"
